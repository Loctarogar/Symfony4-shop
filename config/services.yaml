# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    acme_payment.payum.extension.event_dispatcher:
        class: Payum\Core\Bridge\Symfony\Extension\EventDispatcherExtension
        arguments: ["@event_dispatcher"]
        tags:
        - { name: payum.extension, all: true, prepend: false }

    acme_payment.listener.update_payment_status:
        class: App\Event\Listener\UpdatePaymentStatus
        tags:
        - { name: kernel.event_listener, event: payum.gateway.post_execute, method: updateStatus }

    acme_payment.payu_gateway_factory:
        class: Payum\Core\Bridge\Symfony\Builder\GatewayFactoryBuilder
        arguments: [Accesto\Component\Payum\PayU\PayUGatewayFactory]
        tags:
        - { name: payum.gateway_factory_builder, factory: payu }

    kernel.event_listener.json_request_transformer:
        class: Qandidate\Common\Symfony\HttpKernel\EventListener\JsonRequestTransformerListener
        tags:
          - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 100 }

    admin.category:
        class: App\Admin\CategoryAdmin
        arguments: [~, App\Entity\Category, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Category }
        public: true

    admin.product:
        class: App\Admin\ProductAdmin
        arguments: [~, App\Entity\Product, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Product }
        public: true

    admin.tag:
        class: App\Admin\TagAdmin
        arguments: [~, App\Entity\Tag, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Tag }
        public: true

    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User }
        public: true

    admin.user_role:
        class: App\Admin\UserRoleAdmin
        arguments: [~, App\Entity\UserRole, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: UserRole }
        public: true

    admin.roles:
        class: App\Admin\RolesAdmin
        arguments: [~, App\Entity\Roles, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, label: Roles }
        public: true

    admin.user_groupes:
        class: App\Admin\UserGroupesAdmin
        arguments: [~, App\Entity\UserGroupes, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, label: UserGroupes }
        public: true

    app.security.product_voter:
        class: App\Security\ProductVoter
        tags:
        - { name: security.voter }

    doctrine.filter.configurator:
        class: App\Doctrine\Filter\Configurator
        arguments:
        - "@doctrine.orm.entity_manager"
        - "@security.token_storage"
        tags:
        - { name: kernel.event_listener, event: kernel.request }

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
